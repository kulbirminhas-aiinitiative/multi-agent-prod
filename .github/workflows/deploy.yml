name: Multi-Agent Service CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_URL: localhost:26000
  DEMO_SERVER: 18.134.157.225

jobs:
  # ============================================================================
  # GATE 1: Code Quality
  # ============================================================================
  code-quality:
    name: "Gate 1: Code Quality"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --with dev,test
        continue-on-error: true

      - name: Check Python syntax
        run: |
          find src -name "*.py" -exec python -m py_compile {} \;
        continue-on-error: true

      - name: Run Black (code formatting)
        run: |
          poetry run black --check src/ --line-length 150 || echo "Black check completed with warnings"
        continue-on-error: true

      - name: Run isort (import sorting)
        run: |
          poetry run isort --check src/ || echo "isort check completed with warnings"
        continue-on-error: true

  # ============================================================================
  # GATE 2: Build & Push to Registry
  # ============================================================================
  build:
    name: "Gate 2: Build & Push Image"
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup SSH tunnel to registry
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEMO_SSH_KEY }}" > ~/.ssh/demo_key
          chmod 600 ~/.ssh/demo_key
          ssh-keyscan -H ${{ env.DEMO_SERVER }} >> ~/.ssh/known_hosts

          # Create SSH tunnel to access registry on demo server
          ssh -f -N -L 26000:localhost:26000 -i ~/.ssh/demo_key ec2-user@${{ env.DEMO_SERVER }}

          # Wait for tunnel to establish
          sleep 5

      - name: Build and push Docker image
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION="v1.0.0-${COMMIT_SHA}"
          REGISTRY="localhost:26000"

          # Build image
          docker build \
            -t ${REGISTRY}/multi-agent:${VERSION} \
            -t ${REGISTRY}/multi-agent:latest \
            .

          # Push to registry
          docker push ${REGISTRY}/multi-agent:${VERSION}
          docker push ${REGISTRY}/multi-agent:latest

          echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
          echo "Pushed ${REGISTRY}/multi-agent:${VERSION}"
          echo "Pushed ${REGISTRY}/multi-agent:latest"

  # ============================================================================
  # GATE 3: Deploy from Registry
  # ============================================================================
  deploy-demo:
    name: "Gate 3: Deploy to Demo"
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEMO_SSH_KEY }}" > ~/.ssh/demo_key
          chmod 600 ~/.ssh/demo_key
          ssh-keyscan -H ${{ env.DEMO_SERVER }} >> ~/.ssh/known_hosts

      - name: Deploy on demo server
        run: |
          ssh -i ~/.ssh/demo_key ec2-user@${{ env.DEMO_SERVER }} << 'ENDSSH'
            REGISTRY="localhost:26000"
            IMAGE="${REGISTRY}/multi-agent:latest"

            # Pull latest image from registry
            docker pull ${IMAGE}

            # Stop old container
            docker stop maestro-multi-agent-demo 2>/dev/null || true
            docker rm maestro-multi-agent-demo 2>/dev/null || true

            # Run new container
            docker run -d \
              --name maestro-multi-agent-demo \
              --network maestro-network \
              -p 8404:8000 \
              -e ENVIRONMENT=demo \
              -e DATABASE_URL=postgresql://maestro_multi_agent_user:changeme_multi_agent_password@maestro-postgres:5432/maestro_multi_agent \
              -e LLM_ROUTER_URL=http://maestro-llm-router-demo:8000 \
              -e RAG_SERVICE_URL=http://maestro-rag-service-demo:8000 \
              ${IMAGE}

            # Wait for startup
            sleep 10

            # Health check
            curl -f http://localhost:8404/health || exit 1
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/demo_key ec2-user@${{ env.DEMO_SERVER }} \
            "docker ps | grep multi-agent && echo 'Deployment successful'"

  # ============================================================================
  # GATE 4: Post-Deployment Validation
  # ============================================================================
  post-deployment-validation:
    name: "Gate 4: Post-Deployment Validation"
    runs-on: ubuntu-latest
    needs: deploy-demo

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEMO_SSH_KEY }}" > ~/.ssh/demo_key
          chmod 600 ~/.ssh/demo_key
          ssh-keyscan -H ${{ env.DEMO_SERVER }} >> ~/.ssh/known_hosts

      - name: Check service health
        run: |
          ssh -i ~/.ssh/demo_key ec2-user@${{ env.DEMO_SERVER }} << 'ENDSSH'
            echo "Checking Multi-Agent Service health..."

            # Container running
            docker ps | grep maestro-multi-agent-demo || exit 1

            # Health endpoint
            HEALTH=$(curl -sf http://localhost:8404/health | jq -r '.status' 2>/dev/null || echo "unknown")
            if [ "$HEALTH" != "healthy" ]; then
              echo "Health check failed: $HEALTH"
              exit 1
            fi

            # Test root endpoint
            curl -sf http://localhost:8404/ | jq -r '.service' || exit 1

            # Test teams endpoint
            curl -sf http://localhost:8404/api/v2/teams || exit 1

            echo "All post-deployment checks passed!"
          ENDSSH

      - name: Send deployment notification
        if: success()
        run: |
          echo "Multi-Agent Service deployed successfully to demo server!"
          echo "Service accessible at: http://${{ env.DEMO_SERVER }}:8404"
